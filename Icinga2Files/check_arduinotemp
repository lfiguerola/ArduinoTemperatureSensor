#!/usr/bin/env python

import serial
import time
import sys
import datetime
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-d", "--device", help="the path to the serial device")
parser.add_argument("-m", "--max-temp", type=float, help="the temperature that triggers a warning (float)")

args = parser.parse_args()
#print args.device
#print args.max_temp


try:
	#ser = serial.Serial(args.device,9600,timeout=3) # On Ubuntu systems, /dev/ttyACM0 is the default path to the serial device on Arduinos, yours is likely different.
	# Note: pyserial seems bogus, we're much better off reading
	# the serial device as a normal file
	ser = open( args.device, "a+b" )
except:
	print "CRITICAL - Cannot open serial device {0}".format( args.device )
	sys.exit(2)

# TODO: skip the first line always to avoid partial readings

#time.sleep(3)
ser.write(b'temp1\n')
ser.flush()
time.sleep(3)
ser.close()
#sys.exit(0)

for x in range(0,3):
	ser = open( args.device, "rb" )
	time.sleep(1)
	ser.flush()
	the_goods = ser.readline().strip()


	if the_goods:
		#f = open('sensor_data.txt','a') # put your path here
		#f.write(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S") + ' ' + the_goods)
		#f.close()

		
		# Comprobar temperatura
		if float(the_goods) < args.max_temp:
			print "OK - Temperature within range | 'temp1'={0}".format(the_goods)
			ser.close()
			sys.exit(0)

		# Temperature above threshold
		print "CRITICAL - Temperature within range | 'temp1'={0}".format(the_goods)
		ser.close()
		sys.exit(2)
		# Devolvemos siempre OK de momento

	ser.close()
# Si no hemos podido leer, mal devolvemos CRITICAL
print "CRITICAL - Cannot read serial device {0}".format( args.device )
sys.exit(2)

